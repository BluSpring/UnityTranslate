plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "org.jetbrains.kotlin.jvm" version "2.0.20" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "2.0.20" apply false
    id "com.gradleup.shadow" version "8.3.0" apply false
    id "io.ktor.plugin" version "2.3.11" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.gradleup.shadow"
    apply plugin: "io.ktor.plugin"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.20.4:${rootProject.parchment_snapshot}@zip")
        }

        implementation "de.maxhenkel.voicechat:voicechat-api:${rootProject.voicechat_api_version}"

        // WHATEVER YOU DO
        // DO NOT INCLUDE THIS
        // IT BREAKS GRADLE
        annotationProcessor(implementation("com.moulberry:mixinconstraints:1.0.1"))

        compileOnly "su.plo.voice.api:server:${rootProject.plasmo_api_version}"
    }

    shadowJar {
        configurations = [project.configurations.shadow]
        archiveClassifier.set("dev-shadow")

        exclude "kotlin/**/*", "kotlinx/**/*", "org/intellij/**/*", "org/jetbrains/**/*", "com/google/**/*", "org/slf4j/**/*", "io/netty/channel/unix/**/*"

        // required cuz otherwise it just breaks
        application {
            mainClass.set("ThisDoesNotFuckingExist")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.plugin.serialization"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}+mc${rootProject.minecraft_version}"
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven {
            url "https://maven.parchmentmc.org"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            name = "clojars.org"
            url = uri("https://repo.clojars.org")
        }
        maven {
            name = "Terraformers"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            url = "https://maven.maxhenkel.de/repository/public"
        }
        maven {
            url = "https://maven.neoforged.net/releases/"
        }
        maven {
            name = "plasmoverse-releases"
            url = "https://repo.plasmoverse.com/releases"
        }
        maven {
            name = "plasmoverse-snapshots"
            url = "https://repo.plasmoverse.com/snapshots"
        }
        maven {
            url = "https://maven.nucleoid.xyz/"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}