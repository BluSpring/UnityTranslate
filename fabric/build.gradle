architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}"

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${rootProject.voicechat_version}"

    //modImplementation("maven.modrinth:talk-balloons:1.0.0")
    // don't use anything from here. this is only for Talk Balloons compat.
    modImplementation("maven.modrinth:cloth-config:${rootProject.cloth_config_version}+fabric")
    //modCompileOnly("maven.modrinth:cerbons-api:1.1.0")

    include(annotationProcessor(implementation("com.moulberry:mixinconstraints:1.0.1")))

    include(implementation('org.java-websocket:Java-WebSocket:1.5.7'))

    shadow(implementation("io.ktor:ktor-server-core-jvm:${rootProject.ktor_version}"))
    shadow(implementation("io.ktor:ktor-server-netty-jvm:${rootProject.ktor_version}"))
}

processResources {
    inputs.property "version", rootProject.version
    inputs.property "minecraft_version", rootProject.minecraft_version
    inputs.property "loader_version", rootProject.loader_version
    inputs.property "fabric_version", rootProject.fabric_version
    inputs.property "fabric_kotlin_version", rootProject.fabric_kotlin_version
    inputs.property "architectury_version", rootProject.architectury_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version,
                "minecraft_version": rootProject.minecraft_version,
                "loader_version": rootProject.loader_version,
                "fabric_version": rootProject.fabric_version,
                "fabric_kotlin_version": rootProject.fabric_kotlin_version,
                "architectury_version": rootProject.architectury_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadow]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}